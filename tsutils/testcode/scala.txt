// ==== FUNCS ====

// a simple function
def method1(): Unit = {
    println("Function 1")
}

// a function with arguments
def method1(arg1: String, num: Int): Unit = {
  for (i <- 1 to num) {
    println(arg1)
  }
}

// a function with override modifier
override def method1(arg1: String, num: Int): Unit = {
  for (i <- 1 to num) {
    println(arg1)
  }
}

// a function with private modifier
private def method1(arg1: String, num: Int): Unit = {
  for (i <- 1 to num) {
    println(arg1)
  }
}

// a function with two modifiers
override protected def method1(arg1: String, num: Int): Unit = {
  for (i <- 1 to num) {
    println(arg1)
  }
}

def pair[A, B](first: A, second: B): (A, B) = (first, second)

def max[T <: Ordered[T]](list: List[T]): T = list.max

def mapContainer[F[_], A, B](container: F[A])(func: A => B)(implicit functor: Functor[F]): F[B] = {
  functor.map(container)(func)
}


// === CLASSES ===

// a simple class with 2 functions
class MyClass {
  def classMethod1(): Unit = {
    println("Function 1")
  }
}

// a class with modifiers
sealed abstract class KafkaConsumer {}

// a class with modifiers and type params
sealed abstract class Signature[+T] { self =>
  final def show: String = mergeShow(new StringBuilder(30)).toString
}

// class within a class
class OuterClass {
  class InnerClass {
  }
}

// a simple class with class parameters
class MyClass(val name: String, val age: Int) {
  def greet(): Unit = {
    println(s"Hello, my name is $name and I am $age years old.")
  }
}

// a simple class with class parameters and an extends clause
class MyExtendedClass(name: String, age: Int, val occupation: String) extends MyClass(name, age) {
  def introduce(): Unit = {
    println(s"I am a $occupation.")
  }
}

class MyHealthCheck extends HealthCheck[IO]("my-health-check") {
  override def check(): IO[HealthCheck.Result] = logger.info(l"Health Check") *> IO.pure(HealthCheck.Result.Healthy)
}


// === OBJECTS ===

