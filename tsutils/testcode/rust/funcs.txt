// A basic function
fn function_name() {
    println!("This is a basic function.");
}

// Function with generics
fn generic_function<T>(value: T) -> T {
    value
}

#[inline]
pub fn public_function() -> i32 {
    42
}

pub(crate) fn crate_function() -> i32 {
    42
}

pub(super) fn parent_function() -> i32 {
    42
}

pub(in crate::some_module) fn specific_module_function() -> i32 {
    42
}

// Implementation block for the Table struct
impl Table {
    // Associated function
    fn new(field1: i32, field2: String) -> Self {
        Table { field1, field2 }
    }

    // Method with explicit lifetimes
    fn apply_to<'a>(&'a self, data: &'a mut Table) -> &'a mut Table {
        data.field1 += self.field1;
        data.field2.push_str(&self.field2);
        data
    }

    // Method
    fn update(&mut self, field1: i32) {
        self.field1 = field1;
    }
}

// Implementation of a trait for a struct
impl Drawable for Table {
    fn draw(&self) {
        println!(
            "Drawing Table with field1: {} and field2: {}",
            self.field1, self.field2
        );
    }
}

// Implementation of a trait with generics for a struct
impl<T> Resizable<T> for GenericStruct<T> {
    fn resize(&mut self, value: T) {
        self.field = value;
    }
}

// Implementation block for a struct with generics
impl<T> GenericStruct<T> {
    // Associated function
    fn new(field: T) -> Self {
        GenericStruct { field }
    }

    // Method
    fn get_field(&self) -> &T {
        &self.field
    }
}
